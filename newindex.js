var log = require('./util/createLogger')('preact-i18nline');
var chalk = require('chalk');
var gr = chalk.grey;

var Index = require('i18nline/lib/commands/index');

function NewIndex(options) {
  if (options.silent) log.level = log.NONE;
  Index.call(this, options);
}

NewIndex.prototype = Object.create(Index.prototype);
NewIndex.prototype.constructor = NewIndex;

NewIndex.prototype.indexFileHook = function(script) {
  return script.replace(
		"// Generated by i18nline",
		"// Generated by i18nline and preact-i18nline"
  ).replace(
    "import I18n from 'i18nline';",
    "import I18n from 'preact-i18nline/i18n';"
	);
};

NewIndex.prototype.run = function() {
  log[!this.sub && this.constructor === NewIndex ? 'info' : 'debug'](
    'Generating index file with preact-i18nline\n' +
    gr('Import the generated file into your project\n')
  );

  // run i18nline index first
  Index.prototype.run.apply(this, arguments);

  if (this.constructor === NewIndex) {
    for (var i = 0, e; (e = this.errors[i]); i++) {
      log.error('ERR' + (i + 1) + '\n' + e);
    }
  }

  var elapsed = (new Date()).getTime() - this.startTime;
  log[!this.sub && this.constructor === NewIndex ? 'info' : 'debug'](
    "\nIndex finished " + (this.isSuccess() ? "" : "with errors ") + "in " + (elapsed / 1000) + " seconds\n"
	);

  return this.isSuccess();
};

module.exports = NewIndex;
